[tool_drop_detection]
polling_freq: 1
polling_rate: 100 #(12.5/25/50/100/200/400/800/1600/3200 Hz)

peak_g_threshold: 15
rotation_threshold: 45

accelerometer: T0, T1

crash_gcode:
  RESPOND MSG="(state at failure: pitch:'{pitch}°', roll:'{roll}°', vector:'{vector}°', peak:'{peak}g')"
  RESPOND MSG="Tool accel '{accelerometer}' was (possibly) dropped!"
  {action_emergency_stop()}





[gcode_macro TDD_SET_SHUTTLE_DEFAULTS]
description: Set shuttle-baseline 'TDD_SET_SHUTTLE_DEFAULTS [T=<1,2,3...>]'
gcode:
  {% set P   = printer %}
  {% set tc  = P.toolchanger %}
  {% set tns = tc.tool_numbers %}
  {% set cur = tc.tool_number %}
  {% set req = params.T|default('all') %}
  {% set queue = [] %}

  # ---------- Build tool queue (current tool first) ----------
  {% for raw in (tns if req == 'all' else req.split(',')|map('trim')) %}
    {% set n = raw|int(-1) %}
    {% if n in tns and n not in queue %}
      {% set _ = queue.insert(0, n) if n == cur else queue.append(n) %}
    {% elif raw|trim and n not in tns %}
      RESPOND MSG="Tool '{raw}' invalid, skipping."
    {% endif %}
  {% endfor %}
  {% if queue|length == 0 %}
    RESPOND TYPE=error MSG="No valid tools to process."
  {% endif %}

  # ---------- Homing guard ----------
  {% if P.toolhead.homed_axes != 'xyz' %}
    {% if P.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
      RESPOND MSG="homing first"
      G28
    {% else %}
      RESPOND TYPE=error MSG="Please home all axes first."
    {% endif %}
  {% endif %}
  # ---------- Validate accelerometers ----------
  {% set tinfo = [] %}{% set missing = [] %}
  {% for n in queue %}
    {% set name   = tc.tool_names[n] %}
    {% set accel  = P[name].get('params_accel', name|replace('tool ', '')) %}
    {% set _ = missing.append(name) if accel not in P.tool_drop_detection else tinfo.append([n, accel]) %}
  {% endfor %}
  {% if missing %}
    RESPOND TYPE=error MSG="Missing accel in tool_drop_detection for: {missing|join(', ')}"
  {% endif %}

  RESPOND MSG="Capturing shuttle baselines for: {% for t,a in tinfo %}{ tc.tool_names[t]|replace('tool ', '') } {% endfor %}"

  {% set accel_list = (tinfo|map(attribute=1)|unique|join(','))|string %}

  TDD_POLLING_START ACCEL={accel_list}

  # ---------- Select -> wait -> set ----------
  {% for t, accel in tinfo %}
    {% if t != cur %} T{t} {% endif %}
    G4 P5000                       # let sensors settle
    TDD_REFERENCE_SET  ACCEL={accel}
    TDD_POLLING_STOP   ACCEL={accel}
  {% endfor %}

  TDD_REFERENCE_DUMP ACCEL={accel_list}
  RESPOND MSG="Shuttle baselines updated for ACCEL={accel_list}."
